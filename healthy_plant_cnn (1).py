# -*- coding: utf-8 -*-
"""Healthy_Plant_CNN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/healthy-plant-cnn-fc5055cd-2e19-4f6a-aea8-7487e68ae40b.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250304/auto/storage/goog4_request%26X-Goog-Date%3D20250304T180259Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D0873e4f793c471944d92641173e7916dcfafa0cfe46086228a7d5afa7203779d88e9e8f97b993c49438bdb916c887b611748fe48b461eb0a8add6eca14275d164f1303328a3fee1f35c928a04c9291fca5b74ff9955b5a87e11b8ee19b90373b2601efb029fc94c1f6b17318f5c3492ecb6eb57a58338a2b15ec3ec0d7d3a0768780d39feb0c0c88f591537a1a89e9f6b6a0e2db619f65fd12a583d6acb4027737222b078928798d22f8e2308cd29f78b69619e6898de3c854f54d1a5f0251b3938d6993191c95ff14d6037ffee52cea62ee40db33e4bf6fe56d685c4045feb5a8dd3932aa4576f365e1fda49d1ce7217c9e5072a69d34777e4c38634e1ff58e
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()



# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

plant_pathology_2020_fgvc7_path = kagglehub.competition_download('plant-pathology-2020-fgvc7')

print('Data source import complete.')

import pandas as pd
import numpy as np
import cv2
import os
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import models, layers
from sklearn.model_selection import train_test_split
from PIL import Image
from skimage.feature import hog
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc, roc_auc_score
import seaborn as sns

train=pd.read_csv("/kaggle/input/plant-pathology-2020-fgvc7/train.csv")
test=pd.read_csv("/kaggle/input/plant-pathology-2020-fgvc7/test.csv")

base_path='/kaggle/input/plant-pathology-2020-fgvc7/images/'
def generate_image_path(image_id):
    return f"{base_path}{image_id}.jpg"

# Apply the function to create the 'img' column
train['img'] = train['image_id'].apply(generate_image_path)
test['img'] = test['image_id'].apply(generate_image_path)

train.head()

test.head()

sample=pd.read_csv("/kaggle/input/plant-pathology-2020-fgvc7/sample_submission.csv")
sample

img = cv2.imread(train['img'].iloc[0])

import matplotlib.pyplot as plt
plt.imshow(img)
plt.axis('off')
plt.show()

IMAGE_SIZE = 224
x=[]
for i in train['img']:
    img = cv2.imread(i)

    # Convert BGR to RGB
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    # Resize the image
    resized_img = cv2.resize(img, (IMAGE_SIZE,IMAGE_SIZE))
    x.append(resized_img)

x = np.array(x)

# Prepare the target labels, repeating the labels for each augmented version
y = train[['healthy', 'multiple_diseases', 'rust', 'scab']].values

len(x)

y.shape

# Split the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)

x_train.shape

model = models.Sequential([
    layers.Rescaling(1./255.,input_shape=(224,224,3)),
    layers.Conv2D(8,(3,3),activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Dropout(0.2),
    layers.Conv2D(16,(3,3),activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Dropout(0.2),
    layers.Conv2D(32,(3,3),activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Dropout(0.2),
    layers.Flatten(),
    layers.Dense(256,activation='relu'),
    layers.Dense(64,activation='relu'),
    layers.Dense(4,activation='softmax'),
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

epochs = 25

model.fit(
    x_train,
    y_train,
    epochs=epochs
)

img1 = cv2.imread(test['img'].iloc[2])

# Convert BGR to RGB
img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)

# Resize the image
resized_img1 = cv2.resize(img1, (IMAGE_SIZE,IMAGE_SIZE))

resized_img1.shape

import matplotlib.pyplot as plt
plt.imshow(resized_img)
plt.axis('off')
plt.show()

resized_img1 = np.expand_dims(resized_img1, axis=0)  # Shape becomes (1, 224, 224, 3)

# Predict
predictions = model.predict(resized_img1)
print(predictions)

testing=[]
for i in test['img']:
    img1 = cv2.imread(i)
    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
    resized_img1 = cv2.resize(img1, (IMAGE_SIZE,IMAGE_SIZE))
    resized_img1 = np.expand_dims(resized_img1, axis=0)
    testing.append(model.predict(resized_img1))

predictions_df = []
for i in testing:
    for j in i:
        predictions_df.append(j)

p1=np.array(predictions_df)

q=pd.DataFrame(np.round(p1,2))
submission_df=pd.concat([test['image_id'],q],axis=1)

label_encode = {0:"healthy",1:"multiple_diseases",2:"rust",3:"scab"}

submission_df

submission_df.rename(columns={k:label_encode[k] for k in range(0,4)}).to_csv("submission.csv",index=False)